# syntax=docker/dockerfile:1
# -*- mode: dockerfile -*-

ARG RUST_DEBIAN=docker.io/rust:slim
# repository stage
FROM "${RUST_DEBIAN}" AS repository

ARG TAG="HEAD"
ARG ARTI_GIT_URL="https://gitlab.torproject.org/tpo/core/arti.git"
ARG REPOSITORY_PACKAGES="git ca-certificates"

# install dependencies for getting the source code
# hadolint ignore=SC2086
RUN --mount=type=cache,target="/var/cache",sharing=locked \
    --mount=type=cache,target="/var/lib/apt/lists",sharing=locked \
	set -xe \
	&& apt-get update -y \
    && apt-get install -y --no-install-recommends ${REPOSITORY_PACKAGES}

WORKDIR /root/src

# clone the repository
RUN set -xe \
    && git init --quiet \
	&& git remote add --tags origin ${ARTI_GIT_URL} \
	&& git fetch --quiet --depth 1 origin ${TAG} \
	&& git checkout --quiet FETCH_HEAD


# environment stage
FROM repository AS environment

ARG CARGO_HOME="/usr/local/cargo/"
ARG CARGO_TARGET_DIR="/root"
ARG BUILD_PACKAGES="\
	musl-tools \
	perl \
	make"
ARG RUSTFLAGS="\
	--remap-path-prefix /repository=./ \
	--remap-path-prefix ${CARGO_HOME}=.cargo/ \
	-C target-feature=+crt-static"

# environment variables
ENV LANG="C.UTF-8"
ENV CARGO_HOME="${CARGO_HOME}"
ENV CARGO_TARGET_DIR="${CARGO_TARGET_DIR}"
ENV RUSTFLAGS="${RUSTFLAGS}"

# add build dependencies
# hadolint ignore=SC2086
RUN --mount=type=cache,target="/var/cache/",sharing=locked \
	--mount=type=cache,target="/var/lib/apt/lists",sharing=locked \
	set -xe \
	&& apt-get update -y \
	&& apt-get install -y --no-install-recommends ${BUILD_PACKAGES}

# copy licences using [L] ensures COPY don't fail if the file doesn't exist
COPY --from=repository --chmod=444 \
	"/root/src/[G]PL-3" \
	"/root/src/[L]GPL-3" \
	"/root/src/[L]ICENSE" \
	"/root/src/[L]ICENSE-MIT" \
	"/root/src/[L]ICENSE-APACHE" \
	/usr/share/licences/arti/


# configure stage
FROM environment AS configure

ARG CARGO_FETCH_ENV
ARG CARGO_HOME="/usr/local/cargo/"
ARG RUSTUP_TARGET="x86_64-unknown-linux-musl"
ARG CARGO_FETCH_FLAGS="--color=never --locked"

# fetch the rust dependencies and add the linux-musl target
# hadolint ignore=SC2086
RUN --mount=type=cache,target="${CARGO_HOME}/git",sharing=locked \
    --mount=type=cache,target="${CARGO_HOME}/registry",sharing=locked \
	set -xe \
	&& rustup target add ${RUSTUP_TARGET} \
	&& ${CARGO_FETCH_ENV} cargo fetch ${CARGO_FETCH_FLAGS}


# compile stage
FROM configure AS compile

ARG CARGO_BUILD_ENV
ARG CARGO_HOME="/usr/local/cargo/"
ARG RUSTUP_TARGET="x86_64-unknown-linux-musl"
ARG CARGO_BUILD_FLAGS="\
	--package arti \
	--color=never \
	--locked \
	--offline \
	--release \
	--features static \
	--target ${RUSTUP_TARGET}"

# build arti
# hadolint ignore=SC2086
RUN --mount=type=cache,target="${CARGO_HOME}/git",sharing=locked \
    --mount=type=cache,target="${CARGO_HOME}/registry",sharing=locked \
	set -xe \
	&& ${CARGO_BUILD_ENV} cargo build ${CARGO_BUILD_FLAGS} 


# postcompile stage
FROM compile AS postcompile

ARG CARGO_TARGET_DIR="/root"
ARG RUSTUP_TARGET="x86_64-unknown-linux-musl"
ARG ARTI_GID=1000
ARG ARTI_GROUP=arti
ARG ARTI_UID=1000
ARG ARTI_USER=arti

# strip all symbols not needed by relocations for a smaller binary size
RUN --network=none \
	set -xeo \
	&& strip --strip-unneeded "${CARGO_TARGET_DIR}/${RUSTUP_TARGET}/release/arti"

# only allow the tor group and the tor user
RUN --network=none \
    set -xe \
	&& echo "${ARTI_GROUP}:x:${ARTI_GID}:" > /etc/group \
	&& echo "${ARTI_USER}:x:${ARTI_UID}:${ARTI_GID}::/home/${ARTI_USER}:/bin/false" > /etc/passwd

	
# final stage
FROM scratch AS final

ARG CARGO_TARGET_DIR="/root"
ARG RUSTUP_TARGET="x86_64-unknown-linux-musl"
ARG ARTI_GID=1000
ARG ARTI_UID=1000
ARG ARTI_USER=arti

# copy licences
COPY --from=postcompile --chmod=444 /usr/share/licences/arti /usr/share/licences/arti

# only copy the compiled arti binary
COPY --from=postcompile --chown="${ARTI_UID}:${ARTI_GID}" "${CARGO_TARGET_DIR}/${RUSTUP_TARGET}/release/arti" /arti

# copy the arti group and the arti user definitions
COPY --from=postcompile /etc/group /etc/group
COPY --from=postcompile /etc/passwd /etc/passwd

# switch to the created user:group so arti is not started as root
USER "${ARTI_UID}:${ARTI_GID}"

WORKDIR "/home/${ARTI_USER}"

ENTRYPOINT [ "/arti" ]
